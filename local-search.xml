<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>相机参数</title>
    <link href="/posts/63805/"/>
    <url>/posts/63805/</url>
    
    <content type="html"><![CDATA[<h3 id="相机坐标系">1.相机坐标系</h3><p><img src="1.jpg" /></p><p>相机中有四个坐标系</p><ul><li>世界坐标系：可以任意指定<spanclass="math inline">\(x_w\)</span>轴和<spanclass="math inline">\(y_w\)</span>轴</li><li>相机坐标系：原点位于小孔，z轴与光轴重合，<spanclass="math inline">\(x_c\)</span>轴和<spanclass="math inline">\(y_c\)</span>轴平行投影面</li><li>图像坐标系：原点位于光轴和投影面的交点，<spanclass="math inline">\(x_p\)</span>轴和<spanclass="math inline">\(y_p\)</span>轴平行投影面</li><li>像素坐标系：从小孔向投影面方向看，投影面的左上角为原点，uv轴和投影面两边重合</li></ul><p>一般来说，标定的过程分为两个部分：</p><ul><li>第一步是从世界坐标系转为相机坐标系，这一步是三维点到三维点的转换，包括R，T（相机外参，确定了相机在某个三维空间中的位置和朝向）等参数</li><li>第二部是从相机坐标系转为成像平面坐标系（像素坐标系），这一步是三维点到二维点的转换，包括K（相机内参,是对相机物理特性的近似）等参数</li></ul><h3 id="齐次坐标系">2.齐次坐标系</h3><p>齐次坐标(Homogeneouscoordinate)就是将一个原本是n维的向量用一个n+1维向量来表示，是指一个用于投影几何里的坐标系统，如同用于欧氏几何里的笛卡儿坐标一般。给出点的齐次表达式[XY H]，就可求得其二维笛卡尔坐标，即$ [ X : Y : H ] = [ : : ] = [ X : Y :1 ]$， 这个过程称为归一化处理。在几何意义上，相当于把发生在三维空间的变换限制在H=1的平面内。同时在齐次坐标系下<code>(1, 2, 3), (2, 4, 6),(4, 8, 12)</code>对应同一个欧几里得点<code>(1/3, 2/3)</code>，因此这些点是同一个点，这使得在透视空间里，两条平行线可以相交得到了解决(近大远小)。</p><p><img src="3.png%20=100*100" /></p><p>许多图形应用涉及到几何变换，主要包括<strong>平移、旋转、缩放</strong>。以矩阵表达式来计算这些变换时，平移是矩阵相加，旋转和缩放则是矩阵相乘，引入齐次坐标的目的主要是合并矩阵运算中的乘法和加法。引入齐次坐标后，平移、旋转、缩放可以表示为：<span class="math display">\[\begin{align}   &amp; 平移变换：    \left[\begin{array}{lll}    x^{\prime} &amp; y^{\prime} &amp; 1    \end{array}\right]=\left[\begin{array}{lll}    x &amp; y &amp; 1    \end{array}\right]\left|\begin{array}{ccc}    1 &amp; 0 &amp; 0 \\    0 &amp; 1 &amp; 0 \\    \mathrm{~d} x &amp; \mathrm{~d} y &amp; 1    \end{array}\right|    \quad \\   &amp; 旋转变换：    \left[\begin{array}{lll}    x^{\prime} &amp; y^{\prime} &amp; 1    \end{array}\right]=\left[\begin{array}{lll}    x &amp; y &amp; 1    \end{array}\right]\left|\begin{array}{ccc}    \cos{\theta} &amp; \sin{\theta} &amp; 0 \\    -\sin{\theta} &amp; \cos{\theta} &amp; 0 \\    0 &amp; 0  &amp; 1    \end{array}\right|    \quad \\   &amp; 缩放变换：    \left[\begin{array}{lll}    x^{\prime} &amp; y^{\prime} &amp; 1    \end{array}\right]=\left[\begin{array}{lll}    x &amp; y &amp; 1    \end{array}\right]\left|\begin{array}{ccc}    S_x &amp; 0 &amp; 0 \\    0 &amp; S_y &amp; 0 \\    0 &amp; 0  &amp; 1    \end{array}\right|\end{align}\]</span></p><h3 id="相机内外参数">3.相机内外参数</h3><ol type="1"><li><p>相机外部参数</p><blockquote><ul><li>3个旋转矩阵参数R(绕x,y,z轴)</li><li>3个平移矩阵参数T(沿x,y,z轴)</li></ul></blockquote></li><li><p>相机内部参数</p><p>内参矩阵K为： <span class="math display">\[K = \left|\begin{array}{ccc}    f_x &amp; 0 &amp; u_0 \\    0 &amp; f_y &amp; v_0 \\    0 &amp; 0  &amp; 1    \end{array}\right|\]</span> <span class="math inline">\(f_x=\frac{f}{d_x} \:,f_y=\frac{f}{d_y}\)</span></p><ul><li><p>f：焦距，单位毫米</p></li><li><p>dx：像素x方向宽度，单位毫米(一个像素在感光板上是多少毫米)</p></li><li><p>f/dx：使用像素来描述x轴方向焦距的长度</p></li><li><p>f/dy：使用像素来描述y轴方向焦距的长度</p></li><li><p>u0,v0,主点的实际位置，单位也是像素</p></li></ul><blockquote><p>相机中心射出的一条光线在成像平面上的投影点。它也被称为“主光轴交点”或“光心”。</p></blockquote></li></ol><h3 id="参考">参考</h3><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><ahref="https://www.cnblogs.com/wangguchangqing/p/8126333.html#autoid-0-5-0">SLAM入门之视觉里程计(2)：相机模型（内参数，外参数</a><a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>计算机图形学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图形学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Graph/相机内外参数</title>
    <link href="/posts/36949/"/>
    <url>/posts/36949/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>视图变换 Viewing transformation</title>
    <link href="/posts/64372/"/>
    <url>/posts/64372/</url>
    
    <content type="html"><![CDATA[<h3 id="视图变换-viewing-transformation">1.视图变换 ViewingTransformation</h3><p>视图变换的目的是将三维空间中的点<span class="math inline">\((x, y,z)\)</span>(在世界坐标系中)映射到平面图像中(二维坐标系)，以像素为基本表示单位。类似通过相机拍照得到一张相片。视图变换主要包括三个步骤：</p><blockquote><ul><li>相机变换(camera/view transformation)</li><li>投影变换(projection transformation)</li><li>视口变换(viewport transformation)</li></ul></blockquote><h3 id="相机变换-camera-transformation">2.相机变换 CameraTransformation</h3><img src="/posts/64372/1.jpg" class="" title="相机坐标系移动"><p>相机变换的目的是得到所有可是物体与相机的相对位置，通常包括平移、旋转、缩放。</p><p>规定相机拍摄方向朝向-Z，相机的位置位于e，相机的正上方用向量t来表示，相机的朝向用g表示，<spanclass="math inline">\(\overrightarrow{e}=(x_e, y_e,z_e)\)</span>。首先将相机点平移至世界坐标原点，平移矩阵为： <spanclass="math display">\[T_{\text {view }}=\left[\begin{array}{cccc}1 &amp; 0 &amp; 0 &amp; -x_{e} \\0 &amp; 1 &amp; 0 &amp; -y_{e} \\0 &amp; 0 &amp; 1 &amp; -z_{e} \\0 &amp; 0 &amp; 0 &amp; 1\end{array}\right]\]</span>然后，对相机坐标进行旋转变换，使其与世界坐标系重合。需要将相机朝向g旋转到-Z轴上，t旋转到Y轴上，再通过g叉乘t的方向旋转到X。然而，这个旋转对应的旋转矩阵并不容易写出，但是如果将Z旋转到-g，将Y旋转到t，将X旋转到g叉积t的方向，直接取旋转矩阵的逆矩阵<spanclass="math inline">\(R^{-1}=(u,v,w)\)</span>即可<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="[旋转矩阵(Rotate Matrix)的性质分析](https://www.cnblogs.com/caster99/p/4703033.html)">[1]</span></a></sup>，其中<spanclass="math inline">\(u=\hat{g} \times \hat{t},v=\hat{t},w =-\hat{g}\)</span>，因此旋转矩阵的逆矩阵和旋转矩阵可以写成： <spanclass="math display">\[R_{\text {view }}^{-1}=\left[\begin{array}{cccc}x_{\hat{g} \times \hat{t}} &amp; x_{t} &amp; x_{-g} &amp; 0 \\y_{\hat{g} \times \hat{t}} &amp; y_{t} &amp; y_{-g} &amp; 0 \\z_{\hat{g} \times \hat{t}} &amp; z_{t} &amp; z_{-g} &amp; 0 \\0 &amp; 0 &amp; 0 &amp; 1\end{array}\right]\quad \Rightarrow  \quadR_{\text {view }}=\left[\begin{array}{cccc}x_{\hat{g} \times \hat{t}} &amp; y_{\hat{g} \times \hat{t}}  &amp;z_{\hat{g} \times \hat{t}}  &amp; 0 \\x_{t} &amp; y_{t} &amp; z_{t} &amp; 0 \\x_{-g} &amp;  y_{-g} &amp; z_{-g} &amp; 0 \\0 &amp; 0 &amp; 0 &amp; 1\end{array}\right]\]</span> 所以最终的相机变换矩阵为：<span class="math inline">\(M_{\text{view }}=R_{\text {view }}T_{\text {view }}\)</span>。</p><blockquote><p>PS:从世界坐标系变换到相机坐标系属于刚体变换：即物体不会发生形变，只需要进行旋转和平移。</p></blockquote><h3 id="投影变换-projection-transformation">3.投影变换 ProjectionTransformation</h3><img src="/posts/64372/3.jpg" class="" title="正交投影"><p>投影变换的目的是将相机空间中的点映射到<spanclass="math inline">\([-1, 1]^3\)</span>的立方体上，并且相机<spanclass="math inline">\(e=0\)</span>的射线穿过里立方体中心。这样的立方体叫做规范视图体(CanonicalView Volume)或者标准化设备坐标系(normalized devicecoordinates)。投影变换可以分为两个步骤进行：</p><blockquote><ul><li>正交投影(orthographic projection)</li><li>透视投影(perspection projection)</li></ul></blockquote><ol type="1"><li><p>透视投影</p><p>透视投影就是最类似人眼所看东西的方式，遵循近大远小，通过投影到平面来进行解释。</p><img src="/posts/64372/4.png" class="" title="透视投影"><p>图中的原点代表视点，<code>Z=-n</code>表示近平面(投影平面)，<code>Z=-z</code>表示远平面，需要进行压缩。利用相似三角形可以计算出<spanclass="math inline">\(y^{&#39;}=\frac{n}{z}y,x^{&#39;}=\frac{n}{z}x\)</span>，假定透视矩阵为P，我们计算透视投影后的齐次坐标。<span class="math display">\[P\left[\begin{array}{c}x  \\y  \\z  \\1\end{array}\right]=\left[\begin{array}{c}nx  \\ny  \\?  \\z\end{array}\right]\quad \Rightarrow  \quadP=\left[\begin{array}{cccc}n &amp; 0 &amp; 0 &amp; 0 \\0 &amp; n &amp; 0 &amp; 0 \\? &amp; ? &amp; ? &amp; ? \\0 &amp; 0 &amp; 0 &amp; 1\end{array}\right]\]</span>中间的<code>?</code>可以通过远平面<code>Z=-f</code>和近平面<code>Z=-n</code>的值来计算，当<code>Z=-f</code>时，前面的单独<code>?</code>为<spanclass="math inline">\(f^2\)</span>，当<code>Z=-n</code>时，前面的单独<code>?</code>为<spanclass="math inline">\(n^2\)</span>。假设第三行为<spanclass="math inline">\((0,0,A,B)\)</span>，分别带入<code>n</code>和<code>f</code>可以列出两个等式：<span class="math display">\[\begin{array}{l}A_{n}+B=n^{2} \\A_{f}+B=f^{2} \\\end{array}\quad \Rightarrow \quad\begin{array}{l}A=n+f \\B=-nf \\\end{array}\]</span></p><p>最后的透视投影的变换矩阵为： <span class="math display">\[M_{persp \to -ortho} = P=\left[\begin{array}{cccc}n &amp; 0 &amp; 0&amp; 0 \\0 &amp; n &amp; 0 &amp; 0 \\0 &amp; 0 &amp; n+f &amp; -nf \\0&amp; 0 &amp; 0 &amp; 1\end{array}\right]\]</span>通过计算可知，远平面通过透视投影矩阵的变换后，该平面会沿着Z轴的反向移动，即远离近平面。</p></li><li><p>正交投影</p><img src="/posts/64372/2.jpg" class="" title="正交投影"><p>正交投影变换坐标的相对位置都不会改变，所有光线都是平行传播，只需将物体全部转换到<spanclass="math inline">\([-1,1]^3\)</span>的立方体中，主要的操作有平移和旋转。</p><p>通过计算可以求得立方体的中心点为<span class="math inline">\((x_0,y_0, z_0)\)</span>，其中<span class="math inline">\(x_0=-\frac{r+l}{2},y_0=-\frac{t+b}{2},z_0=-\frac{n+f}{2}\)</span>。因此平移矩阵可以表示为:<span class="math display">\[T=\left[\begin{array}{cccc}1 &amp; 0 &amp; 0 &amp; -\frac{r+l}{2} \\0 &amp; 1 &amp; 0 &amp; -\frac{t+b}{2} \\0 &amp; 0 &amp; 1 &amp; -\frac{n+f}{2} \\0 &amp; 0 &amp; 0 &amp; 1\end{array}\right]\]</span>接下来就需要求缩放矩阵，-1到1的间距为2，而物体在各个轴上的间距分别为<spanclass="math inline">\(\:|l-r|,|b-t|,|n-f|\)</span>，因此，在各个轴方向的缩放因子可以表示为<spanclass="math inline">\(S_x=\frac{2}{|l-r|},S_y=\frac{2}{|b-t|},S_z=\frac{2}{|n-f|}\)</span>。所以缩放矩阵可以表示为：<span class="math display">\[S=\left[\begin{array}{cccc}\frac{2}{|l-r|} &amp; 0 &amp; 0 &amp; 0 \\0 &amp; \frac{2}{|b-t|}&amp; 0 &amp; 0 \\0 &amp; 0 &amp; \frac{2}{|n-f|} &amp; 0 \\0 &amp; 0 &amp; 0 &amp; 1\end{array}\right]\]</span>计算完两个矩阵之后，可以知道最终的正交投影矩阵为两个矩阵的乘积<spanclass="math inline">\(M_{orth}=S \times T\)</span>: <spanclass="math display">\[M_{orth}=\left[\begin{array}{cccc}\frac{2}{|l-r|} &amp; 0 &amp; 0 &amp; 0 \\0 &amp; \frac{2}{|b-t|}&amp; 0 &amp; 0 \\0 &amp; 0 &amp; \frac{2}{|n-f|} &amp; 0 \\0 &amp; 0 &amp; 0 &amp; 1\end{array}\right]\left[\begin{array}{cccc}1 &amp; 0 &amp; 0 &amp; -\frac{r+l}{2} \\0 &amp; 1 &amp; 0 &amp; -\frac{t+b}{2} \\0 &amp; 0 &amp; 1 &amp; -\frac{n+f}{2} \\0 &amp; 0 &amp; 0 &amp; 1\end{array}\right]=\left[\begin{array}{cccc}\frac{2}{|l-r|} &amp; 0 &amp; 0 &amp; -\frac{r+l}{2} \\0 &amp; \frac{2}{|b-t|}&amp; 0 &amp; -\frac{t+b}{2} \\0 &amp; 0 &amp; \frac{2}{|n-f|} &amp; -\frac{n+f}{2} \\0 &amp; 0 &amp; 0 &amp; 1\end{array}\right]\]</span> 3.投影变换矩阵</p><p>通过上述的两个矩阵的乘积可以得出最终的变换矩阵<spanclass="math inline">\(M_{per} = M_{orhto}M_{persp \to -ortho}\)</span><span class="math display">\[M_{per} =\left[\begin{array}{cccc}\frac{2n}{|l-r|} &amp; 0 &amp; -\frac{l+r}{|l-r|} &amp; 0 \\0 &amp; \frac{2n}{|b-t|}&amp; -\frac{b+t}{b-t} &amp; 0 \\0 &amp; 0 &amp; \frac{n+f}{|n-f|} &amp; -\frac{2nf}{|n-f|} \\0 &amp; 0 &amp; 1 &amp; 0\end{array}\right]\]</span></p><h3 id="视口变换">4.视口变换</h3><p>经过上述变换，可以将任意三维空间中的物体投影到标准立方体上，但是之后还需要投影到<spanclass="math inline">\(2\times2\)</span>的二维平面(栅格图像)上进行显示，高度为H，宽度为W，单位为像素。所以，需要将标准立方体中的中的点，转换到屏幕上，所以还是需要先平移，再缩放，形式同正交矩阵：<span class="math display">\[M_{viewport}=\left[\begin{array}{cccc}\frac{W}{2} &amp; 0 &amp; 0 &amp; \frac{W}{2} \\0 &amp; \frac{H}{2}&amp; 0 &amp; \frac{H}{2} \\0 &amp; 0 &amp; 1 &amp; 0 \\0 &amp; 0 &amp; 0 &amp; 1\end{array}\right]\]</span></p><blockquote><p>栅格图像(RasterImage)，也称为位图(Bitmap)，是由像素阵列组成的数字图像。在栅格图像中，每个像素都包含一个特定的颜色值或灰度值，以描述图像中相应位置的颜色和亮度。与矢量图形不同，栅格图像是像素化图像，它通常使用像素阵列来表示图像。每个像素都具有一个X和Y坐标，并包含一个或多个数字值来表示其颜色信息。这些数字值通常使用8位或更高位深度来表示，以提供足够的精度来描述图像细节。</p></blockquote></li></ol><blockquote><p>PS:NeRF中只需要进行投影变换。因为NeRF将相对于世界坐标的相机坐标点作为MLP的输入，它也没有使用视口变换，因为信息是从多层感知器(MLP)中隐式查询而不是从测量对象构建的。</p></blockquote><h3 id="参考">参考</h3><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><ahref="https://www.cnblogs.com/caster99/p/4703033.html">旋转矩阵(RotateMatrix)的性质分析</a><a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><ahref="https://zhuanlan.zhihu.com/p/144323332">计算机图形学基础变换矩阵总结(缩放，旋转，位移)</a><a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>计算机图形学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图形学</tag>
      
      <tag>NeRF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hello-blog</title>
    <link href="/posts/39849/"/>
    <url>/posts/39849/</url>
    
    <content type="html"><![CDATA[<h4 id="开启博客之旅">开启博客之旅~</h4><p>终于把我的博客搭好了，五一假期也结束了，那就开启新的学习之旅吧。享受最后的两年校园时光，做想做的，学想学的，愿毕业时自信又阳光！！！</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
