<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>每周总结(23.05.15-23.05.19)</title>
    <link href="/posts/20521/"/>
    <url>/posts/20521/</url>
    
    <content type="html"><![CDATA[<div align = "center"><H3>工作总结</div><p><strong>日期：2023.05.15-2023.05.19</strong></p><h4 id="paper">1.Paper</h4><p><strong>Title：</strong><code>NeRF++: Analyzing and Improving Neural Radiance Fields.</code></p><p><strong>总结：</strong>这篇论文主要针对神经辐射场(NeRF_方法进行了分析和改进。NeRF是一种用于3D重建和渲染的深度学习模型，它通过建立场景中每个点的颜色和密度函数来表示3D信息，并可以生成极高质量的逼真图像。但该方法在训练和测试时存在一些问题，如计算时间和内存开销大、不稳定性等。</p><blockquote><p>为此，NeRF++通过引入多项新技术对NeRF进行改进，包括：</p><ol type="1"><li>首先，文章提出了一个自适应采样策略，使得更多的采样点可以在物体表面上，从而减少了无效样本，提高了模型的精度。</li><li>其次，文章通过增加正则化项和提高网络深度，在保持模型性能的同时，显著减少了内存和计算时间的消耗。</li><li>另外，文章还提出了一种新的光源采样方法，可以在较短的时间内对复杂光照情况下的场景进行快速且准确的渲染。</li><li>最后，文章还提出了一种自动曝光控制（auto-exposurecontrol）方法，可以帮助模型更好地适应不同的场景光照情况。</li></ol><p>NeRF++的实验结果表明，该方法在精度和效率方面都有所提高，可以很好地解决NeRF方法存在的问题。这些改进使得NeRF++方法成为一个更加稳定、可扩展、适用于复杂场景的深度学习3D重建和渲染工具，具有广泛的应用前景。#### 2.Code</p></blockquote><p>继续研究学习NeRF-Pytorch代码，对其进行逐一调试分析，了解NeRF的具体运作原理与其使用的一些方法，进度：3/4。搭建NeRF++环境，并成功运行其代码，得到结果。</p><h4 id="other">3.Other</h4><ol type="1"><li><p>通过对代码的调试，学习到了一些新的知识，同时也对论文中提出的一些方法有了更加深刻的了解。</p><ul><li><p>位置编码</p><p>NeRF在将位置信息输入到MLP中进行预测前，对位置信息进行了位置编码，从而解决对图像中高频信息预测不准确，得到了结果模糊的问题。</p><p>NeRF通过一系列的[sin,cos]函数编码位置信息，将位置信息从3维增加到60维，如何再作为MLP网络的输入。</p></li><li><p>MLP网络</p><p>NeRF有一个8层的MLP网络，第一层的输入维度为60，输出为256，<code>第五层为跨越连接层</code>，其输入的维度额外增加60，输出仍然保持256，该方法可以增强模型的表示能力和泛化性能，并减少训练时间和复杂度，这8层线性连接层的激活函数都为ReLU。再经历8层连接层后，额外增加一层256特征的线性层，其输出维度为128，用来输出点的密度density，同时这一层加入方向坐标维度用来输出RGB信息。</p></li></ul></li><li><p>学习了一些YOLO目标检测的知识。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>工作总结</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>双指针</title>
    <link href="/posts/58208/"/>
    <url>/posts/58208/</url>
    
    <content type="html"><![CDATA[<h4 id="力扣27-移除元素">力扣27 <ahref="https://leetcode.cn/problems/remove-element/description/">移除元素</a></h4><p>给你一个数组<code>nums</code>和一个值<code>val</code>，你需要原地移除所有数值等于<code>val</code>的元素，并返回移除后数组的新长度。不要使用额外的数组空间，你必须仅使用<code>O(1)</code>额外空间并原地修改输入数组。元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p><strong>示例：</strong></p><p>输入：nums = [3,2,2,3], val = 3 输出：2, nums = [2,2]解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。</p><blockquote><p><strong>思路：</strong>对数组的元素进行操作，可以使用双指针方法，设定一个快指针和一个慢指针。此题因为只需要变换后数组的长度，因此可以采用两种不同的双指针方法。</p><ol type="1"><li><p>如果快指针索引的元素不等于val，则将这个元素赋值给慢指针索引的元素；如果等于val，则快指针指向下一个索引，并且不赋值给慢指针索引的元素。</p></li><li><p>将数组分为有效部分和无效部分，即前后两段</p><ul><li>前半段是有效部分，存储的是不等于<code>val</code>的元素。</li><li>后半段是无效部分，存储的是等于<code>val</code>的元素。</li></ul><p>最终返回有效部分的下标(数组元素顺序发生改变)</p></li></ol></blockquote><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeElement</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], val: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        slow = <span class="hljs-number">0</span>                        <span class="hljs-comment">#慢指针</span><br>        <span class="hljs-keyword">for</span> fast <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)):   <span class="hljs-comment">#快指针</span><br>            <span class="hljs-keyword">if</span>(val != nums[fast]):      <span class="hljs-comment">#判断元素</span><br>                nums[slow] = nums[fast] <br>                slow += <span class="hljs-number">1</span>               <span class="hljs-comment">#慢指针移动</span><br>        <span class="hljs-keyword">return</span> slow <br></code></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeElement</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], val: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        end = <span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">1</span><br>        start = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> start &lt;= end:                 <span class="hljs-comment">#双指针</span><br>            <span class="hljs-keyword">if</span> nums[start] == val:<br>                nums[start], nums[end] = nums[end], nums[start]     <span class="hljs-comment">#交换元素(前面为有效元素，后面为无效元素)</span><br>                start -= <span class="hljs-number">1</span>                  <span class="hljs-comment">#前指针不动</span><br>                end -= <span class="hljs-number">1</span>                    <span class="hljs-comment">#后指针移动</span><br>            start += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> start<br></code></pre></td></tr></table></figure><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">removeElement</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> val)</span> </span>&#123;<br>        <span class="hljs-type">int</span> idx = <span class="hljs-number">0</span>;                            <span class="hljs-comment">//前指针</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> x : nums)                      <span class="hljs-comment">//后指针</span><br>            <span class="hljs-keyword">if</span>(x != val)<br>                nums[idx++] = x;                <span class="hljs-comment">//元素不等于val时，将元素赋值到前指针位置</span><br>        <span class="hljs-keyword">return</span> idx;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">removeElement</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> val)</span> </span>&#123;<br>        <span class="hljs-type">int</span> end = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;                      <span class="hljs-comment">//后指针</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> start = <span class="hljs-number">0</span>; start &lt;= end; start++) &#123;    <span class="hljs-comment">//前指针</span><br>            <span class="hljs-keyword">if</span> (nums[start] == val) &#123;<br>                <span class="hljs-built_in">swap</span>(nums[start--], nums[end--]);       <span class="hljs-comment">//交换元素(前面为有效元素，后面为无效元素)</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> end + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="力扣80-删除有序数组中的重复项-ii">力扣80 <ahref="https://leetcode.cn/problems/remove-duplicates-from-sorted-array-ii/description/">删除有序数组中的重复项II</a></h4><p>给你一个有序数组<code>nums</code>，请你<strong>原地</strong>删除重复出现的元素，使得出现次数超过两次的元素<strong>只出现两次</strong>，返回删除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在 <strong>原地修改输入数组</strong>并在使用O(1)额外空间的条件下完成。</p><p><strong>示例 1：</strong></p><p>输入：nums = [1,1,1,2,2,3] 输出：5, nums = [1,1,2,2,3]解释：函数应返回新长度 length = 5, 并且原数组的前五个元素被修改为 1, 1,2, 2, 3 。 不需要考虑数组中超出新长度后面的元素。</p><blockquote><p><strong>思路：</strong>本题为<ahref="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/">26.删除有序数组中的重复项</a>的进阶，由这两个题目可以总结出一个规律。对于原地修改的有序数组来说，使用双指针。</p><ul><li><strong>慢指针slow</strong>:指向当前即将放置元素的位置；则<code>slow - 2</code>是刚才已经放置了元素的位置。</li><li><strong>快指针fast</strong>: 向后遍历所有元素；</li></ul><p>判断条件：因为数组中的元素最多出现2次，因此定义<code>slow &lt; 2</code>，让其前两个元素均通过，然后再加上一个判断条件<code>nums[fast] != nums[slow-2]</code>，即相同的元素超过两个之后，慢指针<code>slow</code>不再前进，快指针<code>fast</code>继续前进，直到满足判断条件，<code>slow</code>指针位置被覆盖，同时继续前进。</p><p>PS:对于<code>26题</code>，则直接把判断条件改为<code>1</code>即可。</p></blockquote><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeDuplicates</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        slow = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> fast <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)):<br>            <span class="hljs-keyword">if</span> slow &lt; <span class="hljs-number">2</span> <span class="hljs-keyword">or</span> nums[fast] != nums[slow-<span class="hljs-number">2</span>]: <span class="hljs-comment"># 判断条件，是否覆盖，同时慢指针是否前进</span><br>                nums[slow] = nums[fast]   <span class="hljs-comment"># 元素覆盖</span><br>                slow += <span class="hljs-number">1</span>   <span class="hljs-comment"># 慢指针前进</span><br>        <span class="hljs-keyword">return</span> slow<br>    <br>    <span class="hljs-comment"># or </span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeDuplicates</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        slow = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> nums:<br>            <span class="hljs-keyword">if</span> slow &lt; <span class="hljs-number">2</span> <span class="hljs-keyword">or</span> nums[slow-<span class="hljs-number">2</span>]  != x: <span class="hljs-comment"># 判断条件，是否覆盖，同时慢指针是否前进</span><br>                nums[slow] = x   <span class="hljs-comment"># 元素覆盖</span><br>                slow += <span class="hljs-number">1</span>   <span class="hljs-comment"># 慢指针前进</span><br>        <span class="hljs-keyword">return</span> slow<br></code></pre></td></tr></table></figure><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">removeDuplicates</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> slow = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> num : nums)&#123;<br>            <span class="hljs-keyword">if</span>(slow &lt; <span class="hljs-number">2</span> || nums[slow<span class="hljs-number">-2</span>] != num) <span class="hljs-comment">// 判断条件，是否覆盖，同时慢指针是否前进</span><br>                nums[slow++] = num;<span class="hljs-comment">// 元素覆盖，慢指针前进</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> slow;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="总结">总结</h4><p>双指针法（快慢指针法）：<strong>通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。</strong></p><p>定义快慢指针</p><ul><li>快指针：寻找新数组的元素 ，新数组就是不含有目标元素的数组</li><li>慢指针：指向更新 新数组下标的位置</li></ul><p>可以删除有序数组的重复元素以及去除指定的元素。对于双指针，一定得先弄清楚判断条件，什么时候慢指针移动，什么时候不应该移动！</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>刷题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每周总结(23.05.08-23.05.12)</title>
    <link href="/posts/48714/"/>
    <url>/posts/48714/</url>
    
    <content type="html"><![CDATA[<div align = "center"><H3>工作总结</div><p><strong>日期：2023.05.08-2023.05.12</strong></p><h4 id="paper">1.Paper</h4><p><strong>Title：</strong><code>NeRF: Representing Scenes as Neural Radiance Fields for View Synthesis</code></p><p><strong>总结：</strong>NeRF是一种基于神经网络的视图综合方法，可以从有限数量的输入视图合成高质量、高分辨率的新视图。</p><blockquote><ul><li>采集输入数据：从不同角度拍摄一组图片，同时记录相机参数和深度值信息。</li><li>输入：5D坐标(3D位置坐标+2D方向坐标)</li><li>输出：通过MLP多层感知机转换成对应的($RGB$)</li><li>预测新视角：对于给定的任意视角，计算该视角与每个空间位置的交点，并利用预先训练好的神经辐射场计算颜色和透明度值。最后，基于光线投射算法，将这些颜色值合成为一张新的图像。</li></ul></blockquote><h4 id="code">2.Code</h4><p>学习NeRF-pytorch代码,已经看了1/4的代码，了解了代码的输入，数据的转换以及坐标轴的转换。</p><h4 id="other">3.Other</h4><p>学习了视图变换与相机参数的一些基本知识。</p><p>了解了视图变换，包括</p><blockquote><ul><li>相机变换(camera/view transformation)</li><li>投影变换(projection transformation)</li><li>视口变换(viewport transformation)</li></ul></blockquote><ol type="1"><li>投影变换是NeRF中的重要变换，包括</li></ol><blockquote><ul><li>正交投影(orthographic projection)</li><li>透视投影(perspection projection)</li></ul></blockquote><p>它们的变换矩阵分别如下：</p><p><strong>透视投影矩阵：</strong> <span class="math display">\[M_{persp \to -ortho} = P=\left[\begin{array}{cccc}n &amp; 0 &amp; 0&amp; 0 \\0 &amp; n &amp; 0 &amp; 0 \\0 &amp; 0 &amp; n+f &amp; -nf \\0&amp; 0 &amp; 0 &amp; 1\end{array}\right]\]</span> <strong>正交投影矩阵：</strong> <span class="math display">\[M_{orth}=\left[\begin{array}{cccc}\frac{2}{l-r} &amp; 0 &amp; 0 &amp; 0 \\0 &amp; \frac{2}{b-t}&amp; 0 &amp; 0 \\0 &amp; 0 &amp; \frac{2}{n-f} &amp; 0 \\0 &amp; 0 &amp; 0 &amp; 1\end{array}\right]\left[\begin{array}{cccc}1 &amp; 0 &amp; 0 &amp; -\frac{r+l}{2} \\0 &amp; 1 &amp; 0 &amp; -\frac{t+b}{2} \\0 &amp; 0 &amp; 1 &amp; -\frac{n+f}{2} \\0 &amp; 0 &amp; 0 &amp; 1\end{array}\right]=\left[\begin{array}{cccc}\frac{2}{l-r} &amp; 0 &amp; 0 &amp; -\frac{r+l}{2} \\0 &amp; \frac{2}{b-t}&amp; 0 &amp; -\frac{t+b}{2} \\0 &amp; 0 &amp; \frac{2}{n-f} &amp; -\frac{n+f}{2} \\0 &amp; 0 &amp; 0 &amp; 1\end{array}\right]\]</span></p><ol start="2" type="1"><li><p>相机参数</p><p><strong>相机外参T:</strong> <span class="math display">\[T=\left[\begin{array}{cc}R &amp; t \\0^T &amp; 1\\\end{array}\right]\]</span></p><p><strong>相机内参K:</strong> <span class="math display">\[K = \left|\begin{array}{ccc}    f_x &amp; 0 &amp; u_0 \\    0 &amp; f_y &amp; v_0 \\    0 &amp; 0  &amp; 1    \end{array}\right|\]</span></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>工作总结</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>螺旋矩阵</title>
    <link href="/posts/52933/"/>
    <url>/posts/52933/</url>
    
    <content type="html"><![CDATA[<h4 id="力扣59-螺旋矩阵-ii">力扣59 <ahref="https://leetcode.cn/problems/spiral-matrix-ii/description/">螺旋矩阵II</a></h4><p>给你一个正整数<code>n</code>，生成一个包含<code>1</code>到<spanclass="math inline">\(n^2\)</span>所有元素，且元素按顺时针顺序螺旋排列的<code>n x n</code>正方形矩阵<code>matrix</code>。</p><p><strong>示例：</strong></p><p>输入：n = 3 输出：[[1,2,3],[8,9,4],[7,6,5]]</p><figure><img src="1.jpg?100×100" alt="示例" /><figcaption aria-hidden="true">示例</figcaption></figure><blockquote><p><strong>思路</strong>：该题不需要特别的算法，主要是靠模拟，设定边界。</p><p>​生成一个<code>n×n</code>的矩阵，然后模拟顺时针向内环绕的过程(边界很重要)，模拟过程包括从左到右，从上到下，从右到左，从下到上。分别设定上下左右边界<code>t,b,l,r</code>。每行或每列填充完之后，进行对应的行或列的收缩。当填充的数字满足<spanclass="math inline">\(n^2\)</span>时，结束循环。</p></blockquote><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">generateMatrix</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        ans = [[<span class="hljs-number">0</span>]*n <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)] <span class="hljs-comment"># 生成n*n的二维数组</span><br>        l = t = <span class="hljs-number">0</span><br>        r = b = n-<span class="hljs-number">1</span> <br>        num = <span class="hljs-number">1</span><br>        nums = n*n<br>        <span class="hljs-keyword">while</span> num &lt;= nums:          <span class="hljs-comment"># 从外圈到内圈，每次循环一圈</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l, r+<span class="hljs-number">1</span>): <span class="hljs-comment"># 从左到右</span><br>                ans[t][i] = num<br>                num += <span class="hljs-number">1</span><br>            t += <span class="hljs-number">1</span>                  <span class="hljs-comment"># 上边界下移</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(t, b+<span class="hljs-number">1</span>): <span class="hljs-comment"># 从上到下</span><br>                ans[i][r] = num<br>                num += <span class="hljs-number">1</span><br>            r -= <span class="hljs-number">1</span>                  <span class="hljs-comment"># 右边界左移</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(r, l-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>): <span class="hljs-comment"># 从右到左</span><br>                ans[b][i] = num<br>                num += <span class="hljs-number">1</span><br>            b -= <span class="hljs-number">1</span>                  <span class="hljs-comment"># 下边界上移</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(b, t-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>): <span class="hljs-comment"># 从下到上</span><br>                ans[i][l] = num<br>                num += <span class="hljs-number">1</span><br>            l += <span class="hljs-number">1</span>                  <span class="hljs-comment"># 左边界右移</span><br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">generateMatrix</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        nums = [[<span class="hljs-number">0</span>] * n <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>        startx, starty = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>               <span class="hljs-comment"># 起始点</span><br>        loop, mid = n // <span class="hljs-number">2</span>, n // <span class="hljs-number">2</span>          <span class="hljs-comment"># 迭代次数、n为奇数时，矩阵的中心点</span><br>        count = <span class="hljs-number">1</span>                           <span class="hljs-comment"># 计数</span><br><br>        <span class="hljs-keyword">for</span> offset <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, loop + <span class="hljs-number">1</span>) :      <span class="hljs-comment"># 每循环一层偏移量加1，偏移量从1开始</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(starty, n - offset) :    <span class="hljs-comment"># 从左至右，左闭右开</span><br>                nums[startx][i] = count<br>                count += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(startx, n - offset) :    <span class="hljs-comment"># 从上至下</span><br>                nums[i][n - offset] = count<br>                count += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - offset, starty, -<span class="hljs-number">1</span>) : <span class="hljs-comment"># 从右至左</span><br>                nums[n - offset][i] = count<br>                count += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - offset, startx, -<span class="hljs-number">1</span>) : <span class="hljs-comment"># 从下至上</span><br>                nums[i][starty] = count<br>                count += <span class="hljs-number">1</span>                <br>            startx += <span class="hljs-number">1</span>         <span class="hljs-comment"># 更新起始点</span><br>            starty += <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">if</span> n % <span class="hljs-number">2</span> != <span class="hljs-number">0</span> :<span class="hljs-comment"># n为奇数时，填充中心点</span><br>            nums[mid][mid] = count <br>        <span class="hljs-keyword">return</span> nums<br></code></pre></td></tr></table></figure><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">generateMatrix</span>(<span class="hljs-type">int</span> n) &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">ans</span>(n, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n)); <span class="hljs-comment">//创建一个n*n的二维数组</span><br>        <span class="hljs-type">int</span> l, t = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> r, b = n<span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> cnt = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(cnt &lt;= n*n)&#123;                      <span class="hljs-comment">//cnt从1开始，每次循环+1，直到n*n</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l; i&lt;=r; i++)&#123;            <span class="hljs-comment">//从左到右</span><br>                ans[t][i] = cnt;<br>                cnt++;<br>            &#125;   <br>            t++;                                 <span class="hljs-comment">//上边界+1</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=t; i&lt;=b; i++)&#123;            <span class="hljs-comment">//从上到下</span><br>                ans[i][r] = cnt;<br>                cnt++;<br>            &#125;<br>            r--;                                <span class="hljs-comment">//右边界-1</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=r; i&gt;=l; i--)&#123;            <span class="hljs-comment">//从右到左</span><br>                ans[b][i] = cnt;<br>                cnt++;<br>            &#125;<br>            b--;                                <span class="hljs-comment">//下边界-1</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=b; i&gt;=t; i--)&#123;            <span class="hljs-comment">//从下到上</span><br>                ans[i][l] = cnt;<br>                cnt++;<br>            &#125;<br>            l++;                                <span class="hljs-comment">//左边界+1</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>剑指 Offer 29. 顺时针打印矩阵 <ahref="https://leetcode.cn/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/description/">剑指Offer 29. 顺时针打印矩阵</a></p><p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。</p><p><strong>示例：</strong></p><p>输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]输出：[1,2,3,6,9,8,7,4,5]</p><p><strong>限制：</strong></p><ul><li><code>0 &lt;= matrix.length &lt;= 100</code></li><li><code>0 &lt;= matrix[i].length &lt;= 100</code></li></ul><blockquote><p><strong>思路</strong>：该题不需要特别的算法，主要是靠模拟，设定边界。</p><p>模拟顺时针向内环绕的过程(边界很重要)，模拟过程包括从左到右，从上到下，从右到左，从下到上。分别设定上下左右边界<code>t,b,l,r</code>。每行或每列读取完之后，进行对应的行或列的收缩。因为该题中的矩阵并不一定是正方形矩阵，因此判断结束的条件应该为边界是否重合。</p></blockquote><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">spiralOrder</span>(<span class="hljs-params">self, matrix: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> matrix: <span class="hljs-keyword">return</span> []                <span class="hljs-comment">#判断是否为空  </span><br>        l, r, t, b = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(matrix[<span class="hljs-number">0</span>]) - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(matrix) - <span class="hljs-number">1</span>  <span class="hljs-comment"># 列， 行</span><br>        result = []<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l, r + <span class="hljs-number">1</span>):           <span class="hljs-comment">#从左到右</span><br>                result.append(matrix[t][i])<br>            t +=  <span class="hljs-number">1</span>                             <span class="hljs-comment">#上边界下移</span><br>            <span class="hljs-keyword">if</span> t &gt; b:                           <span class="hljs-comment">#判断是否越界</span><br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(t, b + <span class="hljs-number">1</span>):           <span class="hljs-comment">#从上到下   </span><br>                result.append(matrix[i][r])<br>            r -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> l &gt; r: <br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(r, l - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):       <span class="hljs-comment">#从右到左</span><br>                result.append(matrix[b][i])<br>            b -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> t &gt; b: <br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(b, t - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):       <span class="hljs-comment">#从下到上</span><br>                result.append(matrix[i][l])<br>            l += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> l &gt; r: <br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">spiralOrder</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; ans;        <span class="hljs-comment">// 存放结果     </span><br>        <span class="hljs-keyword">if</span>(matrix.<span class="hljs-built_in">empty</span>())&#123;     <span class="hljs-comment">// 矩阵为空</span><br>            <span class="hljs-keyword">return</span> ans;<br>        &#125;<br>        <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, t = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> r = matrix[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span> ; <span class="hljs-comment">// 列</span><br>        <span class="hljs-type">int</span> b = matrix.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;    <span class="hljs-comment">// 行</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l; i&lt;=r; i++) ans.<span class="hljs-built_in">push_back</span>(matrix[t][i]); <span class="hljs-comment">// 从左到右</span><br>            t++;                                                 <span class="hljs-comment">// 上边界下移</span><br>            <span class="hljs-keyword">if</span>(t&gt;b) <span class="hljs-keyword">break</span>;                                       <span class="hljs-comment">// 上边界大于下边界，退出</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=t; i&lt;=b; i++) ans.<span class="hljs-built_in">push_back</span>(matrix[i][r]); <span class="hljs-comment">// 从上到下</span><br>            r--;<br>            <span class="hljs-keyword">if</span>(l&gt;r) <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=r; i&gt;=l; i--) ans.<span class="hljs-built_in">push_back</span>(matrix[b][i]); <span class="hljs-comment">// 从右到左</span><br>            b--;<br>            <span class="hljs-keyword">if</span>(t&gt;b) <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=b; i&gt;=t; i--) ans.<span class="hljs-built_in">push_back</span>(matrix[i][l]); <span class="hljs-comment">// 从下到上</span><br>            l++;<br>            <span class="hljs-keyword">if</span>(l&gt;r) <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="螺旋矩阵总结">螺旋矩阵总结</h4><p>这种题目并不涉及到什么算法，就是模拟过程，但却十分考察对代码的掌控能力。一定要注意边界的问题，统一循环的变量。</p><p>模拟顺时针画矩阵的过程:</p><ul><li>从左到右</li><li>从上到下</li><li>从右到左</li><li>从下到上</li></ul><p>由外向内一圈一圈这么画下去。同时需要注意限制，需要判断矩阵是正方形，还是不一定是正方形，来给出结束的条件。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>刷题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NeRF源码解读</title>
    <link href="/posts/15494/"/>
    <url>/posts/15494/</url>
    
    <content type="html"><![CDATA[<p>imgs : 根据 .json 文件加载到的所有图像数据。（N，H，W，4）N 代表用于train、test、val 的总数量(4:RGBβ) poses : 转置矩阵。（N，4，4）render_poses : 用于测试的 pose 。（40，4，4） i_split : [[0:train],[train:val], [val:test]]</p><p><em>γ</em>(<em>p</em>)=(sin(20<em>πp</em>),cos(20<em>πp</em>),⋯,sin(2<em>L</em>−1<em>πp</em>),cos(2<em>L</em>−1<em>πp</em>))</p><h4 id="参数">参数</h4><p>images: (138, 400, 400, 4), 图像总数, 高宽分别为400, 400,4通道(RGBA)</p><p>poses: (138, 4, 4), 138个图像对应的相机位姿(4*4的c2w变换矩阵)</p><p>render_poses: (40, 4, 4), 40个用于测试的位姿(4*4的c2w变换矩阵)</p><p>hwf: (3,), 图像的高宽和焦距</p><p>i_split: train[0:100], val[0:13], tea-st[0:25]图像的索引</p><p>include_input: 编码结果是否包括原始坐标</p><p>input_dims: 输入数据的维度</p><p>max_freq_log2: 位置编码函数最大频率 L-1</p><p>num_freqs: 位置编码函数的频率数 L</p><p>log_sampling: 频率是否使用指数增长</p><p>periodic_fns: 编码函数[sin, cos]</p><p>embed_fns: 存储编码函数</p><p>out_dim: 存储编码后的总维度</p><p>embed_fn: 位置编码器</p><p>input_ch: 编码后的总维度(作为MLP输入时的维度)</p><p>use_viewdirs: 使用完整的5D坐标</p><p>embeddirs_fn: 存储方向坐标编码函数</p><p>input_ch_views: 编码后的总维度(方向坐标)</p><p>netdepth: 网络深度 8层</p><p>netwidth: 网络宽度 256 粗糙网络(coarse network)上取 64 点,精细网络(fine network)上取 64 + 128 = 192个点, 一共256个点</p><p>input_ch: 位置坐标输入维度x 63</p><p>output_ch: 输出维度 5 (RGB + density)</p><p>skips: 跳跃连接层 第五层 输入向量维度为319</p><p>input_ch_views: 视角方向输入维度d 27</p><p>use_viewdirs: 是否使用视角方向</p><p>pst_linears: 存储MLP的8个隐藏层(包含一个跨越层，319个特征输入)</p><p>views_linears:存储一个额外的线性层(用于输入方向坐标信息，输出密度density，输入256+27，输出128)</p><p>netdepth_fine: 精细网络深度 8</p><p>netwidth_fine: 精细网络特征 256</p><p>netchunk: 网络批量处理的数量 1024<em>64 rays </em> points</p><p>N_rand: 批量大小(每个梯度的随机射线数量)</p><p>N_samples: 每条射线的粗糙网络采样点数</p><p>N_importance: 每条射线额外的精细网络采样点数</p>]]></content>
    
    
    <categories>
      
      <category>NeRF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NeRF</tag>
      
      <tag>源码解读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>滑动窗口</title>
    <link href="/posts/60655/"/>
    <url>/posts/60655/</url>
    
    <content type="html"><![CDATA[<h4 id="力扣209-长度最小的子数组">力扣209 <ahref="https://leetcode.cn/problems/minimum-size-subarray-sum/">长度最小的子数组</a></h4><p>给定一个含有<code>n</code>个正整数的数组和一个正整数<code>s</code>，找出该数组中满足其和<code>≥s</code>的长度最小的连续子数组，并返回其长度。如果不存在符合条件的子数组，返回<code>0</code>。</p><p><strong>示例</strong>：</p><p>输入：s = 7, nums = [2,3,1,2,4,3] 输出：2 解释：子数组 [4,3]是该条件下的长度最小的子数组。 提示： 1 &lt;= target &lt;= 10^9 1 &lt;=nums.length &lt;= 10 1 &lt;= nums[i] &lt;= 10^5</p><blockquote><p><strong>思路</strong>：采用滑动窗口的方法，<code>i</code>为滑动窗口的终止位置，<code>j</code>为滑动窗口的起始位置，<code>Sum</code>记录当前<code>j-&gt;i</code>连续子数组的和，<code>i-j+1</code>为当前连续子数组的长度。</p></blockquote><p><strong>Python：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>nums = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>l = <span class="hljs-built_in">len</span>(nums)<br>Sum = <span class="hljs-number">0</span><br>Len = <span class="hljs-built_in">float</span>(<span class="hljs-string">&quot;inf&quot;</span>)<br>j = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>    Sum += nums[i]                 <span class="hljs-comment"># Sum为当前子数组的和</span><br>    <span class="hljs-keyword">while</span> Sum &gt;= s:<br>        Len = <span class="hljs-built_in">min</span>(Len, i - j + <span class="hljs-number">1</span>)  <span class="hljs-comment"># i - j + 1 为当前子数组的长度</span><br>        Sum -= nums[j]             <span class="hljs-comment"># Sum减去当前子数组的起始元素</span><br>        j += <span class="hljs-number">1</span><br>Len = <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> Len == <span class="hljs-built_in">float</span>(<span class="hljs-string">&quot;inf&quot;</span>) <span class="hljs-keyword">else</span> Len <span class="hljs-comment"># 如果Len没有被赋值，说明没有符合条件的子数组，返回0</span><br><span class="hljs-built_in">print</span>(Len)<br></code></pre></td></tr></table></figure><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minSubArrayLen</span><span class="hljs-params">(<span class="hljs-type">int</span> target, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> length = INT_MAX;<br>        <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;nums.<span class="hljs-built_in">size</span>(); i++)&#123;     <span class="hljs-comment">//滑动窗口</span><br>            sum += nums[i];<br>            <span class="hljs-keyword">while</span>(sum &gt;= target)&#123;<br>                length = <span class="hljs-built_in">min</span>(length, i-j+<span class="hljs-number">1</span>); <span class="hljs-comment">//记录最小长度</span><br>                sum -= nums[j];              <span class="hljs-comment">//缩小窗口</span><br>                j++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> length==INT_MAX ? <span class="hljs-number">0</span> : length;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="力扣904-水果成篮">力扣904 <ahref="https://leetcode.cn/problems/fruit-into-baskets/description/">水果成篮</a></h4><p>你正在探访一家农场，农场从左到右种植了一排果树。这些树用一个整数数组<code>fruits</code>表示，其中<code>fruits[i]</code>是第<code>i</code>棵树上的水果<strong>种类</strong>。</p><p>你想要尽可能多地收集水果。然而，农场的主人设定了一些严格的规矩，你必须按照要求采摘水果：</p><ul><li>你只有<strong>两个</strong>篮子，并且每个篮子只能装<strong>单一类型</strong>的水果。每个篮子能够装的水果总量没有限制。</li><li>你可以选择任意一棵树开始采摘，你必须从<strong>每棵</strong>树（包括开始采摘的树）上<strong>恰好摘一个水果</strong>。采摘的水果应当符合篮子中的水果类型。每采摘一次，你将会向右移动到下一棵树，并继续采摘。</li><li>一旦你走到某棵树前，但水果不符合篮子的水果类型，那么就必须停止采摘。</li></ul><p>给你一个整数数组<code>fruits</code>，返回你可以收集的水果的<strong>最大</strong>数目。</p><p><strong>示例：</strong></p><p>输入：fruits = [1,2,1] 输出：3 解释：可以采摘全部 3 棵树。</p><blockquote><p><strong>思路</strong>：题目的意思翻译一下就是：一个连续的字串中包含两种不同数字的最大长度，因此可以使用滑动窗口，并且使用字典记录元素的个数。</p><p>当窗口中元素的字典长度小于2，扩大窗口；大于2，开始缩小窗口；</p><p>同时相应元素的字典值减小，当减小到0时pop出字典，字典的长度就会减小1。</p></blockquote><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs PYTHON"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">totalFruit</span>(<span class="hljs-params">self, fruits: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        cnt = Counter()<br>        ans = left = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> right <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(fruits)): <span class="hljs-comment">#right为窗口右边界</span><br>            cnt[fruits[right]] += <span class="hljs-number">1</span>      <span class="hljs-comment">#当前窗口内元素字典记录加1</span><br>            <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(cnt) &gt; <span class="hljs-number">2</span>:          <span class="hljs-comment">#当窗口内元素种类大于2时，说明此时的窗口已经不满足条件，开始缩小窗口</span><br>                cnt[fruits[left]] -= <span class="hljs-number">1</span>   <span class="hljs-comment">#窗口左边界元素字典记录减1</span><br>                <span class="hljs-keyword">if</span> cnt[fruits[left]] == <span class="hljs-number">0</span>:  <span class="hljs-comment">#如果窗口左边界元素字典记录为0，窗口内不再有该元素，删除该元素</span><br>                    cnt.pop(fruits[left])<br>                left += <span class="hljs-number">1</span>                   <span class="hljs-comment">#窗口左边界右移</span><br>            ans = <span class="hljs-built_in">max</span>(ans, right - left + <span class="hljs-number">1</span>) <span class="hljs-comment">#更新最大窗口</span><br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">totalFruit</span>(<span class="hljs-params">self, fruits: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        cnt =  defaultdict(<span class="hljs-built_in">int</span>)<br>        ans = left = <span class="hljs-number">0</span><br>        tot = <span class="hljs-number">0</span>                          <span class="hljs-comment">#当前窗口内元素种类数</span><br>        <span class="hljs-keyword">for</span> right <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(fruits)): <span class="hljs-comment">#right为窗口右边界</span><br>            cnt[fruits[right]] += <span class="hljs-number">1</span>      <span class="hljs-comment">#当前窗口内元素字典记录加1</span><br>            <span class="hljs-keyword">if</span> cnt[fruits[right]] == <span class="hljs-number">1</span>:  <span class="hljs-comment">#如果当前窗口内元素字典记录为1，说明该元素是新元素，tot加1</span><br>                tot += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">while</span> tot &gt; <span class="hljs-number">2</span>:               <span class="hljs-comment">#当tot大于2时，说明此时的窗口已经不满足条件，开始缩小窗口</span><br>                cnt[fruits[left]] -= <span class="hljs-number">1</span>   <span class="hljs-comment">#窗口左边界元素字典记录减1</span><br>                <span class="hljs-keyword">if</span> cnt[fruits[left]] == <span class="hljs-number">0</span>: <span class="hljs-comment">#如果窗口左边界元素字典记录为0，窗口内不再有该元素，tot减1</span><br>                    tot -= <span class="hljs-number">1</span><br>                left += <span class="hljs-number">1</span>                   <span class="hljs-comment">#窗口左边界右移</span><br>            ans = <span class="hljs-built_in">max</span>(ans, right - left + <span class="hljs-number">1</span>) <span class="hljs-comment">#更新最大窗口</span><br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">totalFruit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; fruits)</span> </span>&#123;<br>        <span class="hljs-type">int</span> len = fruits.<span class="hljs-built_in">size</span>();<br>        unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; cnt;    <span class="hljs-comment">//创建一个哈希表字典，记录窗口中水果出现的次数</span><br><br>        <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>,  ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> right=<span class="hljs-number">0</span>; right &lt; len; right++)&#123; <span class="hljs-comment">//窗口右边界</span><br>            cnt[fruits[right]]++;               <span class="hljs-comment">//当前窗口中的水果的字典值加一</span><br>            <br>            <span class="hljs-keyword">while</span>(cnt.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">2</span>)&#123;              <span class="hljs-comment">//如果窗口中水果种类大于2，开始缩小窗口</span><br>                <span class="hljs-keyword">auto</span> it = cnt.<span class="hljs-built_in">find</span>(fruits[left]);   <span class="hljs-comment">//从窗口中左边界开始</span><br>                it-&gt;second--;                       <span class="hljs-comment">//当前水果的字典值减一</span><br>                <span class="hljs-keyword">if</span>(it-&gt;second == <span class="hljs-number">0</span>)&#123;                <span class="hljs-comment">//如果当前水果的次数为0，从哈希表字典中删除</span><br>                    cnt.<span class="hljs-built_in">erase</span>(it);<br>                &#125;<br>                left++;                             <span class="hljs-comment">//左边界右移，缩小窗口</span><br>            &#125;<br>            ans = <span class="hljs-built_in">max</span>(ans, right - left + <span class="hljs-number">1</span>);       <span class="hljs-comment">//更新最大窗口</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="力扣76-最小覆盖子串">力扣76 <ahref="https://leetcode.cn/problems/minimum-window-substring/description/">最小覆盖子串</a></h4><p>给你一个字符串<code>s</code>、一个字符串<code>t</code>。返回<code>s</code>中涵盖<code>t</code>所有字符的最小子串。如果<code>s</code>中不存在涵盖<code>t</code>所有字符的子串，则返回空字符串<code>""</code>。</p><p><strong>示例 ：</strong></p><p>输入：s = "ADOBECODEBANC", t = "ABC" 输出："BANC" 解释：最小覆盖子串"BANC" 包含来自字符串 t 的 'A'、'B' 和 'C'。</p><blockquote><p><strong>思路</strong>：用i,j表示滑动窗口的左边界和右边界，通过改变i,j来扩展和收缩滑动窗口，当这个窗口包含的元素满足条件，即包含字符串T的所有元素，记录下这个滑动窗口的长度j-i+1，这些长度中的最小值就是要求的结果。</p></blockquote><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minWindow</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, t: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>        cnt = Counter(t)    <span class="hljs-comment">#记录每个字符出现的次数</span><br>        cntLen = <span class="hljs-built_in">len</span>(t)<br>        left = <span class="hljs-number">0</span><br>        ans = (<span class="hljs-number">0</span>,<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>))<br>        <span class="hljs-keyword">for</span> right <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)): <span class="hljs-comment">#right为窗口右边界</span><br>            <span class="hljs-keyword">if</span> cnt[s[right]] &gt; <span class="hljs-number">0</span>:   <span class="hljs-comment">#如果s[right]在t中出现过</span><br>                cntLen -= <span class="hljs-number">1</span>         <span class="hljs-comment">#t中字符总数减1</span><br>            cnt[s[right]] -= <span class="hljs-number">1</span>      <span class="hljs-comment">#当前记录减1</span><br>            <span class="hljs-keyword">while</span> cntLen == <span class="hljs-number">0</span>:      <span class="hljs-comment">#当cntLen为0时，说明此时的窗口已经包含了t中的所有字符</span><br>                <span class="hljs-keyword">if</span> (right - left + <span class="hljs-number">1</span>) &lt; (ans[<span class="hljs-number">1</span>] - ans[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>):  <span class="hljs-comment">#更新最小窗口</span><br>                    ans = (left, right)<br>                <span class="hljs-keyword">if</span> cnt[s[left]] == <span class="hljs-number">0</span>:  <span class="hljs-comment">#如果s[left]为t中的字符</span><br>                    cntLen += <span class="hljs-number">1</span>        <span class="hljs-comment">#t中字符总数加1</span><br>                cnt[s[left]] += <span class="hljs-number">1</span>      <span class="hljs-comment">#当前记录加1</span><br>                <span class="hljs-built_in">print</span>(left, right, ans, cntLen, cnt)<br>                left += <span class="hljs-number">1</span>              <span class="hljs-comment">#窗口左边界右移</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">if</span> ans[<span class="hljs-number">1</span>]&gt;<span class="hljs-built_in">len</span>(s) <span class="hljs-keyword">else</span> s[ans[<span class="hljs-number">0</span>]:ans[<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">minWindow</span><span class="hljs-params">(string s, string t)</span> </span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">need</span><span class="hljs-params">(<span class="hljs-number">128</span>, <span class="hljs-number">0</span>)</span></span>;       <span class="hljs-comment">//记录t中每个字符出现的次数</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> c : t)&#123;                <br>            need[c]++;                  <span class="hljs-comment">//创建一个哈希表字典</span><br>        &#125;<br>        <span class="hljs-type">int</span> count = t.<span class="hljs-built_in">length</span>();<br>        <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = <span class="hljs-number">0</span>, start = <span class="hljs-number">0</span>, size = INT_MAX;<br>        <span class="hljs-keyword">while</span>(r&lt;s.<span class="hljs-built_in">length</span>())&#123;            <span class="hljs-comment">//滑动窗口右边界</span><br>            <span class="hljs-type">char</span> c = s[r];<br>            <span class="hljs-keyword">if</span>(need[c] &gt; <span class="hljs-number">0</span>)&#123;           <span class="hljs-comment">//如果s中的字符在t中出现过</span><br>                count--;               <span class="hljs-comment">//t中字符出现次数减一</span><br>            &#125;<br>            need[c]--;                 <span class="hljs-comment">//更新哈希表</span><br>            <span class="hljs-keyword">if</span>(count == <span class="hljs-number">0</span>)&#123;            <span class="hljs-comment">//如果t中的字符都在窗口中</span><br>                <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>                    <span class="hljs-keyword">if</span>(need[s[l]] == <span class="hljs-number">0</span>)&#123;    <span class="hljs-comment">//如果s中的字符在t中，直接跳出循环</span><br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    need[s[l]]++;           <span class="hljs-comment">//否则左边界右移，缩小窗口</span><br>                    l++;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(r-l+<span class="hljs-number">1</span>&lt;size)&#123;             <span class="hljs-comment">//更新最小窗口</span><br>                    start = l, size = r-l+<span class="hljs-number">1</span>;<br>                &#125;<br>                need[s[l]]++;               <span class="hljs-comment">//为t中的字符左边界右移，开启新的窗口滑动</span><br>                count++;                    <span class="hljs-comment">//t中字符出现次数加一</span><br>                l++;<br>            &#125;<br>            r++;<br>        &#125;<br>    <span class="hljs-keyword">return</span> size == INT_MAX ? <span class="hljs-string">&quot;&quot;</span> : s.<span class="hljs-built_in">substr</span>(start, size);<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="滑动窗口总结">滑动窗口总结</h4><p>​所谓滑动窗口，就是不断的调节子序列的起始位置和终止位置，从而得出我们要想的结果。如果窗口中的子串<code>没有满足条件，我们就扩宽窗口，右边界滑动</code>；而一旦<code>满足条件，我们就需要缩小窗口，左边界滑动</code>，直到不满足条件。如果条件是字符串或者是需要记录窗口中元素的情况，我们就需要<code>结合字典</code>，通过计算字典长度来进行求解。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>刷题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>相机参数</title>
    <link href="/posts/63805/"/>
    <url>/posts/63805/</url>
    
    <content type="html"><![CDATA[<h3 id="相机坐标系">1.相机坐标系</h3><p><img src="1.jpg" /></p><p>相机中有四个坐标系</p><ul><li>世界坐标系：可以任意指定<spanclass="math inline">\(x_w\)</span>轴和<spanclass="math inline">\(y_w\)</span>轴</li><li>相机坐标系：原点位于小孔，z轴与光轴重合，<spanclass="math inline">\(x_c\)</span>轴和<spanclass="math inline">\(y_c\)</span>轴平行投影面</li><li>图像坐标系：原点位于光轴和投影面的交点，<spanclass="math inline">\(x_p\)</span>轴和<spanclass="math inline">\(y_p\)</span>轴平行投影面</li><li>像素坐标系：从小孔向投影面方向看，投影面的左上角为原点，uv轴和投影面两边重合</li></ul><p>一般来说，标定的过程分为两个部分：</p><ul><li>第一步是从世界坐标系转为相机坐标系，这一步是三维点到三维点的转换，包括R，T（相机外参，确定了相机在某个三维空间中的位置和朝向）等参数</li><li>第二部是从相机坐标系转为成像平面坐标系（像素坐标系），这一步是三维点到二维点的转换，包括K（相机内参,是对相机物理特性的近似）等参数</li></ul><h3 id="齐次坐标系">2.齐次坐标系</h3><p>齐次坐标(Homogeneouscoordinate)就是将一个原本是n维的向量用一个n+1维向量来表示，是指一个用于投影几何里的坐标系统，如同用于欧氏几何里的笛卡儿坐标一般。给出点的齐次表达式[XY H]，就可求得其二维笛卡尔坐标，即$ [ X : Y : H ] = [ : : ] = [ X : Y :1 ]$， 这个过程称为归一化处理。在几何意义上，相当于把发生在三维空间的变换限制在H=1的平面内。同时在齐次坐标系下<code>(1, 2, 3), (2, 4, 6),(4, 8, 12)</code>对应同一个欧几里得点<code>(1/3, 2/3)</code>，因此这些点是同一个点，这使得在透视空间里，两条平行线可以相交得到了解决(近大远小)。</p><p><img src="3.png?100x100" /></p><p>许多图形应用涉及到几何变换，主要包括<strong>平移、旋转、缩放</strong>。以矩阵表达式来计算这些变换时，平移是矩阵相加，旋转和缩放则是矩阵相乘，引入齐次坐标的目的主要是合并矩阵运算中的乘法和加法。引入齐次坐标后，平移、旋转、缩放可以表示为：<span class="math display">\[\begin{align}   &amp; 平移变换：    \left[\begin{array}{lll}    x^{\prime} &amp; y^{\prime} &amp; 1    \end{array}\right]=\left[\begin{array}{lll}    x &amp; y &amp; 1    \end{array}\right]\left|\begin{array}{ccc}    1 &amp; 0 &amp; 0 \\    0 &amp; 1 &amp; 0 \\    \mathrm{~d} x &amp; \mathrm{~d} y &amp; 1    \end{array}\right|    \quad \\   &amp; 旋转变换：    \left[\begin{array}{lll}    x^{\prime} &amp; y^{\prime} &amp; 1    \end{array}\right]=\left[\begin{array}{lll}    x &amp; y &amp; 1    \end{array}\right]\left|\begin{array}{ccc}    \cos{\theta} &amp; \sin{\theta} &amp; 0 \\    -\sin{\theta} &amp; \cos{\theta} &amp; 0 \\    0 &amp; 0  &amp; 1    \end{array}\right|    \quad \\   &amp; 缩放变换：    \left[\begin{array}{lll}    x^{\prime} &amp; y^{\prime} &amp; 1    \end{array}\right]=\left[\begin{array}{lll}    x &amp; y &amp; 1    \end{array}\right]\left|\begin{array}{ccc}    S_x &amp; 0 &amp; 0 \\    0 &amp; S_y &amp; 0 \\    0 &amp; 0  &amp; 1    \end{array}\right|\end{align}\]</span></p><h3 id="相机内外参数">3.相机内外参数</h3><ol type="1"><li><p>相机外部参数</p><blockquote><ul><li>3个旋转矩阵参数R(绕x,y,z轴)</li><li>3个平移矩阵参数T(沿x,y,z轴)</li></ul></blockquote><p>camera to world(c2w)：</p><p>设<span class="math inline">\(P_c\)</span>为<spanclass="math inline">\(P\)</span>在相机坐标系下的坐标，<spanclass="math inline">\(P_w\)</span>是其在世界坐标系下的坐标，可以使用一个旋转矩阵<code>R</code>和一个平移向量<code>t</code>，将<spanclass="math inline">\(P_c\)</span>变换为<spanclass="math inline">\(P_w\)</span>: <span class="math display">\[P_c = RP_w + t\]</span>其中<code>R</code>是一个3×3的旋转矩阵，<code>t</code>是3×1的平移向量，一下为齐次坐标形式：<span class="math display">\[\left[\begin{array}{c}X_{c} \\Y_{c} \\Z_{c}\end{array}\right]=\left[\begin{array}{lll}R_{11} &amp; R_{12} &amp; R_{13} \\R_{21} &amp; R_{22} &amp; R_{23} \\R_{31} &amp; R_{32} &amp; R_{33}\end{array}\right]\left[\begin{array}{l}X_{w} \\Y_{w} \\Z_{w}\end{array}\right]+\left[\begin{array}{l}t_{1} \\t_{2} \\t_{3}\end{array}\right]\quad \Rightarrow  \quad\left[\begin{array}{c}X_{c} \\Y_{c} \\Z_{c} \\1\end{array}\right]=\left[\begin{array}{cccc}R_{11} &amp; R_{12} &amp; R_{13} &amp; t_{1} \\R_{21} &amp; R_{22} &amp; R_{23} &amp; t_{2} \\R_{31} &amp; R_{32} &amp; R_{33} &amp; t_{3} \\0 &amp; 0 &amp; 0 &amp; 1\end{array}\right]\left[\begin{array}{c}X_{w} \\Y_{w} \\Z_{w} \\1\end{array}\right]\]</span></p><p>将旋转矩阵<code>R</code>和平移向量<code>t</code>带入： <spanclass="math display">\[\left[\begin{array}{c}X_{c} \\Y_{c} \\Z_{c} \\1\end{array}\right]=\left[\begin{array}{cc}R &amp; t \\0^T &amp; 1\\\end{array}\right]\left[\begin{array}{c}X_{w} \\Y_{w} \\Z_{w} \\1\end{array}\right]\]</span> 上面就推导出了相机的<code>外部参数T</code>: <spanclass="math display">\[T=\left[\begin{array}{cc}R &amp; t \\0^T &amp; 1\\\end{array}\right]\]</span></p></li><li><p>相机内部参数</p><p>内参矩阵K为： <span class="math display">\[K = \left|\begin{array}{ccc}    f_x &amp; 0 &amp; u_0 \\    0 &amp; f_y &amp; v_0 \\    0 &amp; 0  &amp; 1    \end{array}\right|\]</span> <span class="math inline">\(f_x=\frac{f}{d_x} \:,f_y=\frac{f}{d_y}\)</span></p><ul><li><p>f：焦距，单位毫米</p></li><li><p>dx：像素x方向宽度，单位毫米(一个像素在感光板上是多少毫米)</p></li><li><p>f/dx：使用像素来描述x轴方向焦距的长度</p></li><li><p>f/dy：使用像素来描述y轴方向焦距的长度</p></li><li><p>u0,v0,主点的实际位置，单位也是像素</p></li></ul><blockquote><p>相机中心射出的一条光线在成像平面上的投影点。它也被称为“主光轴交点”或“光心”。</p></blockquote></li></ol><h3 id="参考">参考</h3><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><ahref="https://www.cnblogs.com/wangguchangqing/p/8126333.html#autoid-0-5-0">SLAM入门之视觉里程计(2)：相机模型(内参数，外参数)</a><a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>计算机图形学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图形学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>视图变换 Viewing transformation</title>
    <link href="/posts/64372/"/>
    <url>/posts/64372/</url>
    
    <content type="html"><![CDATA[<h3 id="视图变换-viewing-transformation">1.视图变换 ViewingTransformation</h3><p>视图变换的目的是将三维空间中的点<span class="math inline">\((x, y,z)\)</span>(在世界坐标系中)映射到平面图像中(二维坐标系)，以像素为基本表示单位。类似通过相机拍照得到一张相片。视图变换主要包括三个步骤：</p><blockquote><ul><li>相机变换(camera/view transformation)</li><li>投影变换(projection transformation)</li><li>视口变换(viewport transformation)</li></ul></blockquote><figure><img src="6.png" alt="坐标系定义" /><figcaption aria-hidden="true">坐标系定义</figcaption></figure><h3 id="相机变换-camera-transformation">2.相机变换 CameraTransformation</h3><figure><img src="1.jpg?100×100" alt="相机坐标系移动" /><figcaption aria-hidden="true">相机坐标系移动</figcaption></figure><p>相机变换的目的是得到所有可是物体与相机的相对位置，通常包括平移、旋转、缩放。</p><p>规定相机拍摄方向朝向-Z，相机的位置位于e，相机的正上方用向量t来表示，相机的朝向用g表示，<spanclass="math inline">\(\overrightarrow{e}=(x_e, y_e,z_e)\)</span>。首先将相机点平移至世界坐标原点，平移矩阵为： <spanclass="math display">\[T_{\text {view }}=\left[\begin{array}{cccc}1 &amp; 0 &amp; 0 &amp; -x_{e} \\0 &amp; 1 &amp; 0 &amp; -y_{e} \\0 &amp; 0 &amp; 1 &amp; -z_{e} \\0 &amp; 0 &amp; 0 &amp; 1\end{array}\right]\]</span>然后，对相机坐标进行旋转变换，使其与世界坐标系重合。需要将相机朝向g旋转到-Z轴上，t旋转到Y轴上，再通过g叉乘t的方向旋转到X。然而，这个旋转对应的旋转矩阵并不容易写出，但是如果将Z旋转到-g，将Y旋转到t，将X旋转到g叉积t的方向，直接取旋转矩阵的逆矩阵<spanclass="math inline">\(R^{-1}=(u,v,w)\)</span>即可<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="[旋转矩阵(Rotate Matrix)的性质分析](https://www.cnblogs.com/caster99/p/4703033.html)">[1]</span></a></sup>，其中<spanclass="math inline">\(u=\hat{g} \times \hat{t},v=\hat{t},w =-\hat{g}\)</span>，因此旋转矩阵的逆矩阵和旋转矩阵可以写成： <spanclass="math display">\[R_{\text {view }}^{-1}=\left[\begin{array}{cccc}x_{\hat{g} \times \hat{t}} &amp; x_{t} &amp; x_{-g} &amp; 0 \\y_{\hat{g} \times \hat{t}} &amp; y_{t} &amp; y_{-g} &amp; 0 \\z_{\hat{g} \times \hat{t}} &amp; z_{t} &amp; z_{-g} &amp; 0 \\0 &amp; 0 &amp; 0 &amp; 1\end{array}\right]\quad \Rightarrow  \quadR_{\text {view }}=\left[\begin{array}{cccc}x_{\hat{g} \times \hat{t}} &amp; y_{\hat{g} \times \hat{t}}  &amp;z_{\hat{g} \times \hat{t}}  &amp; 0 \\x_{t} &amp; y_{t} &amp; z_{t} &amp; 0 \\x_{-g} &amp;  y_{-g} &amp; z_{-g} &amp; 0 \\0 &amp; 0 &amp; 0 &amp; 1\end{array}\right]\]</span> 所以最终的相机变换矩阵为：<span class="math inline">\(M_{\text{view }}=R_{\text {view }}T_{\text {view }}\)</span>。</p><blockquote><p>PS:从世界坐标系变换到相机坐标系属于刚体变换：即物体不会发生形变，只需要进行旋转和平移。</p></blockquote><h3 id="投影变换-projection-transformation">3.投影变换 ProjectionTransformation</h3><figure><img src="3.jpg?100×100" alt="投影变换" /><figcaption aria-hidden="true">投影变换</figcaption></figure><p>投影变换的目的是将相机空间中的点映射到<spanclass="math inline">\([-1, 1]^3\)</span>的立方体上，并且相机<spanclass="math inline">\(e=0\)</span>的射线穿过里立方体中心。这样的立方体叫做规范视图体(CanonicalView Volume)或者标准化设备坐标系(normalized devicecoordinates)。投影变换可以分为两个步骤进行：</p><blockquote><ul><li>正交投影(orthographic projection)</li><li>透视投影(perspection projection)</li></ul></blockquote><ol type="1"><li><p>透视投影</p><p>透视投影就是最类似人眼所看东西的方式，遵循近大远小，通过投影到平面来进行解释。</p><figure><img src="4.png?100×100" alt="透视投影" /><figcaption aria-hidden="true">透视投影</figcaption></figure><p>图中的原点代表视点，<code>Z=-n</code>表示近平面(投影平面)，<code>Z=-z</code>表示远平面，需要进行压缩。利用相似三角形可以计算出<spanclass="math inline">\(y^{&#39;}=\frac{n}{z}y,x^{&#39;}=\frac{n}{z}x\)</span>，假定透视矩阵为P，我们计算透视投影后的齐次坐标。<span class="math display">\[P\left[\begin{array}{c}x  \\y  \\z  \\1\end{array}\right]=\left[\begin{array}{c}nx  \\ny  \\?  \\z\end{array}\right]\quad \Rightarrow  \quadP=\left[\begin{array}{cccc}n &amp; 0 &amp; 0 &amp; 0 \\0 &amp; n &amp; 0 &amp; 0 \\? &amp; ? &amp; ? &amp; ? \\0 &amp; 0 &amp; 0 &amp; 1\end{array}\right]\]</span>中间的<code>?</code>可以通过远平面<code>Z=-f</code>和近平面<code>Z=-n</code>的值来计算，当<code>Z=-f</code>时，前面的单独<code>?</code>为<spanclass="math inline">\(f^2\)</span>，当<code>Z=-n</code>时，前面的单独<code>?</code>为<spanclass="math inline">\(n^2\)</span>。假设第三行为<spanclass="math inline">\((0,0,A,B)\)</span>，分别带入<code>n</code>和<code>f</code>可以列出两个等式：<span class="math display">\[\begin{array}{l}A_{n}+B=n^{2} \\A_{f}+B=f^{2} \\\end{array}\quad \Rightarrow \quad\begin{array}{l}A=n+f \\B=-nf \\\end{array}\]</span></p><p>最后的透视投影的变换矩阵为： <span class="math display">\[M_{persp \to -ortho} = P=\left[\begin{array}{cccc}n &amp; 0 &amp; 0&amp; 0 \\0 &amp; n &amp; 0 &amp; 0 \\0 &amp; 0 &amp; n+f &amp; -nf \\0&amp; 0 &amp; 0 &amp; 1\end{array}\right]\]</span>通过计算可知，远平面通过透视投影矩阵的变换后，该平面会沿着Z轴的反向移动，即远离近平面。</p></li><li><p>正交投影</p><figure><img src="2.jpg?100×100" alt="正交投影" /><figcaption aria-hidden="true">正交投影</figcaption></figure><p>正交投影变换坐标的相对位置都不会改变，所有光线都是平行传播，只需将物体全部转换到<spanclass="math inline">\([-1,1]^3\)</span>的立方体中，主要的操作有平移和旋转。</p><p>通过计算可以求得立方体的中心点为<span class="math inline">\((x_0,y_0, z_0)\)</span>，其中<span class="math inline">\(x_0=-\frac{r+l}{2},y_0=-\frac{t+b}{2},z_0=-\frac{n+f}{2}\)</span>。因此平移矩阵可以表示为:<span class="math display">\[T=\left[\begin{array}{cccc}1 &amp; 0 &amp; 0 &amp; -\frac{r+l}{2} \\0 &amp; 1 &amp; 0 &amp; -\frac{t+b}{2} \\0 &amp; 0 &amp; 1 &amp; -\frac{n+f}{2} \\0 &amp; 0 &amp; 0 &amp; 1\end{array}\right]\]</span>接下来就需要求缩放矩阵，-1到1的间距为2，而物体在各个轴上的间距分别为<spanclass="math inline">\(\:l-r,b-t,n-f\)</span>，因此，在各个轴方向的缩放因子可以表示为<spanclass="math inline">\(S_x=\frac{2}{l-r},S_y=\frac{2}{b-t},S_z=\frac{2}{n-f}\)</span>。所以缩放矩阵可以表示为：<span class="math display">\[S=\left[\begin{array}{cccc}\frac{2}{l-r} &amp; 0 &amp; 0 &amp; 0 \\0 &amp; \frac{2}{b-t}&amp; 0 &amp; 0 \\0 &amp; 0 &amp; \frac{2}{n-f} &amp; 0 \\0 &amp; 0 &amp; 0 &amp; 1\end{array}\right]\]</span>计算完两个矩阵之后，可以知道最终的正交投影矩阵为两个矩阵的乘积<spanclass="math inline">\(M_{orth}=S \times T\)</span>: <spanclass="math display">\[M_{orth}=\left[\begin{array}{cccc}\frac{2}{l-r} &amp; 0 &amp; 0 &amp; 0 \\0 &amp; \frac{2}{b-t}&amp; 0 &amp; 0 \\0 &amp; 0 &amp; \frac{2}{n-f} &amp; 0 \\0 &amp; 0 &amp; 0 &amp; 1\end{array}\right]\left[\begin{array}{cccc}1 &amp; 0 &amp; 0 &amp; -\frac{r+l}{2} \\0 &amp; 1 &amp; 0 &amp; -\frac{t+b}{2} \\0 &amp; 0 &amp; 1 &amp; -\frac{n+f}{2} \\0 &amp; 0 &amp; 0 &amp; 1\end{array}\right]=\left[\begin{array}{cccc}\frac{2}{l-r} &amp; 0 &amp; 0 &amp; -\frac{r+l}{2} \\0 &amp; \frac{2}{b-t}&amp; 0 &amp; -\frac{t+b}{2} \\0 &amp; 0 &amp; \frac{2}{n-f} &amp; -\frac{n+f}{2} \\0 &amp; 0 &amp; 0 &amp; 1\end{array}\right]\]</span> 3.投影变换矩阵</p><p>通过上述的两个矩阵的乘积可以得出最终的变换矩阵<spanclass="math inline">\(M_{per} = M_{orhto}M_{persp \to -ortho}\)</span><span class="math display">\[M_{per} =\left[\begin{array}{cccc}\frac{2n}{l-r} &amp; 0 &amp; -\frac{l+r}{l-r} &amp; 0 \\0 &amp; \frac{2n}{b-t}&amp; -\frac{b+t}{b-t} &amp; 0 \\0 &amp; 0 &amp; \frac{n+f}{n-f} &amp; -\frac{2nf}{n-f} \\0 &amp; 0 &amp; 1 &amp; 0\end{array}\right]\]</span></p><h3 id="视口变换">4.视口变换</h3><p>经过上述变换，可以将任意三维空间中的物体投影到标准立方体上，但是之后还需要投影到<spanclass="math inline">\(2\times2\)</span>的二维平面(栅格图像)上进行显示，高度为H，宽度为W，单位为像素。所以，需要将标准立方体中的中的点，转换到屏幕上，所以还是需要先平移，再缩放，形式同正交矩阵：<span class="math display">\[M_{viewport}=\left[\begin{array}{cccc}\frac{W}{2} &amp; 0 &amp; 0 &amp; \frac{W}{2} \\0 &amp; \frac{H}{2}&amp; 0 &amp; \frac{H}{2} \\0 &amp; 0 &amp; 1 &amp; 0 \\0 &amp; 0 &amp; 0 &amp; 1\end{array}\right]\]</span></p><blockquote><p>栅格图像(RasterImage)，也称为位图(Bitmap)，是由像素阵列组成的数字图像。在栅格图像中，每个像素都包含一个特定的颜色值或灰度值，以描述图像中相应位置的颜色和亮度。与矢量图形不同，栅格图像是像素化图像，它通常使用像素阵列来表示图像。每个像素都具有一个X和Y坐标，并包含一个或多个数字值来表示其颜色信息。这些数字值通常使用8位或更高位深度来表示，以提供足够的精度来描述图像细节。</p></blockquote></li></ol><blockquote><p>PS:NeRF中只需要进行投影变换。因为NeRF将相对于世界坐标的相机坐标点作为MLP的输入，它也没有使用视口变换，因为信息是从多层感知器(MLP)中隐式查询而不是从测量对象构建的。</p></blockquote><h3 id="参考">参考</h3><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><ahref="https://www.cnblogs.com/caster99/p/4703033.html">旋转矩阵(RotateMatrix)的性质分析</a><a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><ahref="https://zhuanlan.zhihu.com/p/144323332">计算机图形学基础变换矩阵总结(缩放，旋转，位移)</a><a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>计算机图形学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图形学</tag>
      
      <tag>NeRF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hello-blog</title>
    <link href="/posts/39849/"/>
    <url>/posts/39849/</url>
    
    <content type="html"><![CDATA[<h4 id="开启博客之旅">开启博客之旅~</h4><p>终于把我的博客搭好了，五一假期也结束了，那就开启新的学习之旅吧。享受最后的两年校园时光，做想做的，学想学的，愿毕业时自信又阳光！！！</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
