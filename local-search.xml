<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>nerf</title>
    <link href="/2023/05/03/3D/"/>
    <url>/2023/05/03/3D/</url>
    
    <content type="html"><![CDATA[<p>it’s 3D </p><img src="/2023/05/03/3D/fluid.png" class="" title="This is an example image">]]></content>
    
    
    <categories>
      
      <category>3D</category>
      
    </categories>
    
    
    <tags>
      
      <tag>3D read</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2023/05/03/test/"/>
    <url>/2023/05/03/test/</url>
    
    <content type="html"><![CDATA[<p>test</p>]]></content>
    
    
    <categories>
      
      <category>test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重拾算法之递归</title>
    <link href="/2023/05/02/%E9%87%8D%E6%8B%BE%E7%AE%97%E6%B3%95%E4%B9%8B%E9%80%92%E5%BD%92/"/>
    <url>/2023/05/02/%E9%87%8D%E6%8B%BE%E7%AE%97%E6%B3%95%E4%B9%8B%E9%80%92%E5%BD%92/</url>
    
    <content type="html"><![CDATA[<h4 id="递归和循环的差别"><a href="#递归和循环的差别" class="headerlink" title="递归和循环的差别"></a>递归和循环的差别</h4><ul><li><p>递归：你打开面前这扇门，看到屋里面还有一扇门。你走过去，发现手中的钥匙还可以打开它，你推开门，发现里面还有一扇门，你继续打开它。若干次之后，你打开面前的门后，发现只有一间屋子，没有门了。然后，你开始原路返回，每走回一间屋子，你数一次，走到入口的时候，你可以回答出你到底用这你把钥匙打开了几扇门。</p></li><li><p>循环：你打开面前这扇门，看到屋里面还有一扇门。你走过去，发现手中的钥匙还可以打开它，你推开门，发现里面还有一扇门（若前面两扇门都一样，那么这扇门和前两扇门也一样；如果第二扇门比第一扇门小，那么这扇门也比第二扇门小，你继续打开这扇门，一直这样继续下去直到打开所有的门。但是，入口处的人始终等不到你回去告诉他答案。</p></li></ul><h4 id="递归思想内涵"><a href="#递归思想内涵" class="headerlink" title="递归思想内涵"></a>递归思想内涵</h4><p>​正如上面所描述的场景，递归就是有去（递去）有回（归来），如下图所示。“有去”是指：递归问题必须可以<a href="">分解为若干个规模较小</a>，与原问题形式相同的子问题，这些子问题可以用相同的解题思路来解决，就像上面例子中的钥匙可以打开后面所有门上的锁一样；“有回”是指 : 这些问题的演化过程是一个从大到小，由近及远的过程，并且会有一个明确的终点(临界点)，一旦到达了这个临界点，就不用再往更小、更远的地方走下去。最后，从这个临界点开始，原路返回到原点，原问题解决。</p><h4 id="递归三要素"><a href="#递归三要素" class="headerlink" title="递归三要素"></a>递归三要素</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">1.</span>明确递归终止条件<br><span class="hljs-number">2.</span>给出递归终止时的处理办法<br><span class="hljs-number">3.</span>提取重复的逻辑，缩小问题规模<br></code></pre></td></tr></table></figure><h4 id="递归模型"><a href="#递归模型" class="headerlink" title="递归模型"></a>递归模型</h4><p>模型一：在递去的过程中解决问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">function <span class="hljs-title">recursion</span><span class="hljs-params">(大规模)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (end_condition)&#123;      <span class="hljs-comment">// 明确的递归终止条件</span><br>        end;   <span class="hljs-comment">// 简单情景</span><br>    &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-comment">// 在将问题转换为子问题的每一步，解决该步中剩余部分的问题</span><br>        solve;                <span class="hljs-comment">// 递去</span><br>        <span class="hljs-built_in">recursion</span>(小规模);     <span class="hljs-comment">// 递到最深处后，不断地归来</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>模型二：在归来的过程中解决问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">function <span class="hljs-title">recursion</span><span class="hljs-params">(大规模)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (end_condition)&#123;      <span class="hljs-comment">// 明确的递归终止条件</span><br>        end;   <span class="hljs-comment">// 简单情景</span><br>    &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-comment">// 先将问题全部描述展开，再由尽头“返回”依次解决每步中剩余部分的问题</span><br>        <span class="hljs-built_in">recursion</span>(小规模);     <span class="hljs-comment">// 递去</span><br>        solve;                <span class="hljs-comment">// 归来</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="递归实践"><a href="#递归实践" class="headerlink" title="递归实践"></a>递归实践</h4><ol><li><p>阶乘</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Title: 阶乘的实现 </span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *      递归解法</span><br><span class="hljs-comment"> *      非递归解法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> rico</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Factorial</span> &#123;<br>    <span class="hljs-comment">/**     </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 阶乘的递归实现</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> rico       </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@created</span> 2017年5月10日 下午8:45:48     </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> n</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>     </span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>        <span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>)   <span class="hljs-comment">// 递归终止条件 </span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;    <span class="hljs-comment">// 简单情景</span><br><br>        <span class="hljs-keyword">return</span> n*f(n-<span class="hljs-number">1</span>);  <span class="hljs-comment">// 相同重复逻辑，缩小问题的规模</span><br>    &#125;<br><br>--------------------------------我是分割线--------------------------------<br><br>    <span class="hljs-comment">/**     </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 阶乘的非递归实现，循环</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> rico       </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@created</span> 2017年5月10日 下午8:46:43     </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> n</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>     </span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">f_loop</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> n;<br>        <span class="hljs-keyword">while</span> (n &gt; <span class="hljs-number">1</span>) &#123;<br>            n--;<br>            result = result * n;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>斐波那契数列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Title: 斐波纳契数列</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* Description: 斐波纳契数列，又称黄金分割数列，指的是这样一个数列：1、1、2、3、5、8、13、21、……</span><br><span class="hljs-comment">* 在数学上，斐波纳契数列以如下被以递归的方法定义：F0=0，F1=1，Fn=F(n-1)+F(n-2)（n&gt;=2，n∈N*）。</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* 两种递归解法：经典解法和优化解法</span><br><span class="hljs-comment">* 两种非递归解法：递推法和数组法</span><br><span class="hljs-comment">*/</span> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 经典递归法求解</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * 斐波那契数列如下：</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     *  1,1,2,3,5,8,13,21,34,...</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * *那么，计算fib(5)时，需要计算1次fib(4),2次fib(3),3次fib(2)，调用了2次fib(1)*，即：</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     *  fib(5) = fib(4) + fib(3)</span><br><span class="hljs-comment">     *  </span><br><span class="hljs-comment">     *  fib(4) = fib(3) + fib(2) ；fib(3) = fib(2) + fib(1)</span><br><span class="hljs-comment">     *  </span><br><span class="hljs-comment">     *  fib(3) = fib(2) + fib(1)</span><br><span class="hljs-comment">     *  </span><br><span class="hljs-comment">     * 这里面包含了许多重复计算，而实际上我们只需计算fib(4)、fib(3)、fib(2)和fib(1)各一次即可，</span><br><span class="hljs-comment">     * 后面的optimizeFibonacci函数进行了优化，使时间复杂度降到了O(n).</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> rico</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@created</span> 2017年5月10日 下午12:00:42</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> n</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FibonacciSequence</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fibonacci</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span> || n == <span class="hljs-number">2</span>) &#123;     <span class="hljs-comment">// 递归终止条件</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;       <span class="hljs-comment">// 简单情景</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> fibonacci(n - <span class="hljs-number">1</span>) + fibonacci(n - <span class="hljs-number">2</span>); <span class="hljs-comment">// 相同重复逻辑，缩小问题的规模</span><br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**     </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 对经典递归法的优化</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 斐波那契数列如下：</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> *  1,1,2,3,5,8,13,21,34,...</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 那么，我们可以这样看：fib(1,1,5) = fib(1,2,4) = fib(2,3,3) = 5</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 也就是说，以1,1开头的斐波那契数列的第五项正是以1,2开头的斐波那契数列的第四项，</span><br><span class="hljs-comment"> * 而以1,2开头的斐波那契数列的第四项也正是以2,3开头的斐波那契数列的第三项，</span><br><span class="hljs-comment"> * 更直接地，我们就可以一步到位：fib(2,3,3) = 2 + 3 = 5,计算结束。 </span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 注意，前两个参数是数列的开头两项，第三个参数是我们想求的以前两个参数开头的数列的第几项。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 时间复杂度：O(n)</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> rico       </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> first 数列的第一项</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> second 数列的第二项</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> n 目标项</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span>     </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">optimizeFibonacci</span><span class="hljs-params">(<span class="hljs-type">int</span> first, <span class="hljs-type">int</span> second, <span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>)&#123;    <span class="hljs-comment">// 递归终止条件</span><br>            <span class="hljs-keyword">return</span> first;       <span class="hljs-comment">// 简单情景</span><br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n == <span class="hljs-number">2</span>)&#123;            <span class="hljs-comment">// 递归终止条件</span><br>            <span class="hljs-keyword">return</span> second;      <span class="hljs-comment">// 简单情景</span><br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n == <span class="hljs-number">3</span>) &#123;         <span class="hljs-comment">// 递归终止条件</span><br>            <span class="hljs-keyword">return</span> first + second;      <span class="hljs-comment">// 简单情景</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> optimizeFibonacci(second, first + second, n - <span class="hljs-number">1</span>);  <span class="hljs-comment">// 相同重复逻辑，缩小问题规模</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><br>--------------------------------我是分割线-------------------------------------<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* <span class="hljs-doctag">@description</span> 非递归解法：有去无回</span><br><span class="hljs-comment">* <span class="hljs-doctag">@author</span> rico</span><br><span class="hljs-comment">* <span class="hljs-doctag">@created</span> 2017年5月10日 下午12:03:04</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> n</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fibonacci_loop</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br><br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span> || n == <span class="hljs-number">2</span>) &#123;   <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;      <span class="hljs-comment">// 自己维护的&quot;栈&quot;,以便状态回溯</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">second</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;     <span class="hljs-comment">// 自己维护的&quot;栈&quot;,以便状态回溯</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>; i &lt;= n; i++) &#123; <span class="hljs-comment">// 循环</span><br>        result = first + second;<br>        first = second;<br>        second = result;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br>--------------------------------我是分割线-------------------------------------<br><br><span class="hljs-comment">/**     </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 使用数组存储斐波那契数列</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> rico       </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> n</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>     </span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fibonacci_array</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];   <span class="hljs-comment">// 使用临时数组存储斐波纳契数列</span><br>            arr[<span class="hljs-number">0</span>] = arr[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt; n; i++) &#123;   <span class="hljs-comment">// 为临时数组赋值</span><br>                arr[i] = arr[i-<span class="hljs-number">1</span>] + arr[i-<span class="hljs-number">2</span>];<br>            &#125;<br>            <span class="hljs-keyword">return</span> arr[n - <span class="hljs-number">1</span>];<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/05/02/hello-world/"/>
    <url>/2023/05/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
